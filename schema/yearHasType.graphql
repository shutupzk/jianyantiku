type YearHasType {
  id: ObjID!
  yearExamType: YearExamType!
  yearExerciseList: YearExerciseList!
  count: Int
  exercises(skip: Int, limit: Int): [Exercise!]
  rateOfProgressOfExamination(userId: ObjID!): RateOfProgressOfExamination
  createdAt: Float!
  updatedAt: Float!
}

extend type Query {
  yearHasTypes(skip: Int, limit: Int): [YearHasType!]
  yearHasType(id: ObjID!): YearHasType
}

input createYearHasTypeinput {
  yearExamTypeId: ObjID!
  yearExerciseListId: ObjID!
}

input UpdateYearHasTypeInput {
  yearExamTypeId: ObjID!
  yearExerciseListId: ObjID!
}

extend type Mutation {
  createYearHasType(input: createYearHasTypeinput!): YearHasType
  updateYearHasType(id: ObjID!, input: UpdateYearHasTypeInput!): YearHasType
  removeYearHasType(id: ObjID!): Boolean
}
