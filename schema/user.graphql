type User {
  id: ObjID!
  phone: String!
  avatar: String
  name: String
  sex: String # 0: 女 1：男
  openId: String #微信用户的openid
  wcNickName: String
  birthday: String
  disabled: Boolean
  rank: Int
  score: Int #积分
  scoreUsed: Float #使用积分
  countCourseCollect: Int
  countUserAnswer: Int
  countRightUserAnswer: Int
  member: Member
  exerciseRate: Float
  exerciseCollects(skip:Int, limit: Int): [ExerciseCollect!]
  errorExcercises(skip:Int, limit: Int, isAnswer: Boolean, subjectId: ObjID): [Exercise!]
  courseCollects(skip:Int, limit: Int): [CourseCollect!]
  userAnswers(skip:Int, limit: Int, isAnswer: Boolean, subjectId: ObjID): [UserAnswer!]
  decorations(skip:Int, limit: Int): [Decoration!]
  scoreRecords(skip:Int, limit: Int, date: String): [ScoreRecord!]
  examinations(skip:Int, limit: Int): [Examination]
  rateOfProgressOfSections(skip:Int, limit: Int): [RateOfProgressOfSection!]
  userSigns(skip:Int, limit: Int): [UserSign!]
  userShares(skip:Int, limit: Int): [UserShare!]
  userInvitations(skip:Int, limit: Int): [UserInvitation!]
  userMembers: [UserMember!]
  createdAt: Float!
  updatedAt: Float!
}

extend type Query {
  users(skip:Int, limit: Int, sort: String, keyword: String): [User!]
  user(id: ObjID!): User
  getUserByPhone(phone: String!): User
  getUserByOpenId(openId: String!): User
}

input signUpInput {
  phone: String!
  password: String!
  avatar: String
  name: String
  sex: String # 0: 女 1：男
  openId: String #微信用户的openid
  wcNickName: String
  birthday: String
  openId:String
  rank:Int
}

input UpdateUserInput {
  avatar: String
  openId: String
  wcNickName: String
}

input UpdatePasswordInput {
  password: String
  newPassword: String
  verifyCode: String
}

extend type Mutation {
  signUp(input:signUpInput!): User
  updateUser(id: ObjID!, input: UpdateUserInput!): User
  updatePassword(phone:String!,input:UpdatePasswordInput!): User
  removeUser(id: ObjID!): Boolean
}
